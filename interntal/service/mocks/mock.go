// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/naumovrus/backend-trainee-asignment/interntal/entities"
	repository "github.com/naumovrus/backend-trainee-asignment/interntal/repository"
)

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUser) CreateUser(user entities.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUser)(nil).CreateUser), user)
}

// GetUserSegments mocks base method.
func (m *MockUser) GetUserSegments(userId int) ([]entities.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSegments", userId)
	ret0, _ := ret[0].([]entities.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSegments indicates an expected call of GetUserSegments.
func (mr *MockUserMockRecorder) GetUserSegments(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSegments", reflect.TypeOf((*MockUser)(nil).GetUserSegments), userId)
}

// MockSegment is a mock of Segment interface.
type MockSegment struct {
	ctrl     *gomock.Controller
	recorder *MockSegmentMockRecorder
}

// MockSegmentMockRecorder is the mock recorder for MockSegment.
type MockSegmentMockRecorder struct {
	mock *MockSegment
}

// NewMockSegment creates a new mock instance.
func NewMockSegment(ctrl *gomock.Controller) *MockSegment {
	mock := &MockSegment{ctrl: ctrl}
	mock.recorder = &MockSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSegment) EXPECT() *MockSegmentMockRecorder {
	return m.recorder
}

// AddUserSegment mocks base method.
func (m *MockSegment) AddUserSegment(userId int, segments repository.SegmentRequest) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserSegment", userId, segments)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserSegment indicates an expected call of AddUserSegment.
func (mr *MockSegmentMockRecorder) AddUserSegment(userId, segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserSegment", reflect.TypeOf((*MockSegment)(nil).AddUserSegment), userId, segments)
}

// CreateSegment mocks base method.
func (m *MockSegment) CreateSegment(segment entities.Segment) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSegment", segment)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSegment indicates an expected call of CreateSegment.
func (mr *MockSegmentMockRecorder) CreateSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSegment", reflect.TypeOf((*MockSegment)(nil).CreateSegment), segment)
}

// DeleteSegment mocks base method.
func (m *MockSegment) DeleteSegment(segment entities.Segment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSegment", segment)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSegment indicates an expected call of DeleteSegment.
func (mr *MockSegmentMockRecorder) DeleteSegment(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSegment", reflect.TypeOf((*MockSegment)(nil).DeleteSegment), segment)
}

// DeleteUserSegment mocks base method.
func (m *MockSegment) DeleteUserSegment(userId int, segments repository.SegmentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserSegment", userId, segments)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserSegment indicates an expected call of DeleteUserSegment.
func (mr *MockSegmentMockRecorder) DeleteUserSegment(userId, segments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserSegment", reflect.TypeOf((*MockSegment)(nil).DeleteUserSegment), userId, segments)
}
